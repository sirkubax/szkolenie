###
#############################
# Part 1:                   
# Create instances VPN_1 
#############################

- name: Create base production infrastructure on Amazon | VPN1/2
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
  - vars_files_var: ["vars/vpn1_vpc.yml"]

  pre_tasks:
      - include_vars: "{{ item }}"
        with_first_found: "{{ vars_files_var }}"
      - set_fact:
          generic_vpc: "{{ vpn1_vpc }}"

  roles:
      - { role: mid_create_vpc }

#############################
# Part 2:                   
# Create instances vpn1-a/b
#############################

- hosts: localhost
  connection: local
  gather_facts: False

  vars:
  - vars_files_var: ["../../../vars/vpn1_vpc.yml"]

  roles:
      - { role: sys_create_aws_vpn, source_dest_check: False }

#############################
# Part 3:                   
# Set hostname, add masquarade for internal routing to vpn2-a/b instances
#############################

- name: Set instance hostname
  hosts: temp_group
  gather_facts: False

  vars:
  - vars_files_var: ["vars/vpn1_vpc.yml"]

  pre_tasks:
      - include_vars: "{{ item }}"
        with_first_found: "{{ vars_files_var }}"
      - name: Set correct ssh key path
        set_fact: 
          ansible_ssh_private_key_file: "{{ ssh_key }}"
        when: ssh_key is defined

  tasks:

  - name: "name instances A (set hostname)"
    hostname:
        name={{ vpn1_vpc.ec2_eip.instance_A.name }}
    when: inventory_hostname == vpn1_vpc.ec2_eip.instance_A.ip
    become: True

  - name: "name instances B (set hostname)"
    hostname:
        name={{ vpn1_vpc.ec2_eip.instance_B.name }}
    when: inventory_hostname == vpn1_vpc.ec2_eip.instance_B.ip
    become: True

  - name: Ensure IP forwarding enabled
    sysctl: name=net.ipv4.ip_forward value=1
    become: True
  
  - name: Enable forwarding to vpn2-a/b via vpn1-a/b hosts 
    command: iptables -t nat -A POSTROUTING -s 10.18.0.0/24 -d {{ item }} -j MASQUERADE
    with_items:
        - 52.58.121.174/32
        - 52.58.109.136/32
    become: True
  - name: Enable forwarding to vpn2-a/b via vpn1-a/b hosts 
    command: iptables -t nat -A POSTROUTING -s 10.19.0.0/24 -d {{ item }} -j MASQUERADE
    with_items:
        - 52.58.121.174/32
        - 52.58.109.136/32
    become: True

#############################
# Part 3:                   
# Apply default roles to tagged instances 
#############################

- name: Apply default roles to tagged instances 
  hosts: temp_group
  become: true

  roles:
      - sys_manage_keys
      - sys_debug
      - sys_init_aws
      - sys_init_common
 
#########################################
# Part 4:                   
# change tags 
#########################################

- hosts: temp_group
  gather_facts: False
  connection: local

  tasks:
    - name: Change tags
      ec2_tag: resource={{ ansible_ec2_instance_id }} region={{ ansible_ec2_placement_region }}
      args:
          tags:
              state_tag: prepared
#              Name: "{{ hostname_base }}"
      delegate_to: localhost

    - name: Get rid of SSH "Are you sure you want to continue connecting (yes/no)?" query
      local_action: command sh -c 'ssh-keyscan -t rsa {{ item }} >>$HOME/.ssh/known_hosts'
      with_items: "{{ play_hosts }}"

##########################################
# Part 5
# Instal VPN
##########################################

- hosts: temp_group
  become: true

  vars:
  - vars_files_var: ["vars/vpn1_vpc.yml"]

  pre_tasks:
      - include_vars: "{{ item }}"
        with_first_found: "{{ vars_files_var }}"
      - set_fact:
          generic_vpc: "{{ vpn1_vpc }}"

  roles:
      - { role: mid_openvpn, tags: ['openvpn'] }
